// GENERATED CODE - DO NOT MODIFY BY HAND

part of 'db.dart';

// **************************************************************************
// SqfEntityGenerator
// **************************************************************************

// ignore_for_file: non_constant_identifier_names

//  These classes was generated by SqfEntity
//  Copyright (c) 2019, All rights reserved. Use of this source code is governed by a
//  Apache license that can be found in the LICENSE file.

//  To use these SqfEntity classes do following:
//  - import model.dart into where to use
//  - start typing ex:Continent.select()... (add a few filters with fluent methods)...(add orderBy/orderBydesc if you want)...
//  - and then just put end of filters / or end of only select()  toSingle() / or toList()
//  - you can select one or return List<yourObject> by your filters and orders
//  - also you can batch update or batch delete by using delete/update methods instead of tosingle/tolist methods
//    Enjoy.. Huseyin Tokpunar

// BEGIN TABLES
// Continent TABLE
class TableContinent extends SqfEntityTableBase {
  TableContinent() {
    // declare properties of EntityTable
    tableName = 'continent';
    primaryKeyName = 'code';
    primaryKeyType = PrimaryKeyType.text;
    useSoftDeleting = false;
    // when useSoftDeleting is true, creates a field named 'isDeleted' on the table, and set to '1' this field when item deleted (does not hard delete)

    // declare fields
    fields = [
      SqfEntityFieldBase('name', DbType.text, isNotNull: true),
    ];
    super.init();
  }
  static SqfEntityTableBase? _instance;
  static SqfEntityTableBase get getInstance {
    return _instance = _instance ?? TableContinent();
  }
}

// Country TABLE
class TableCountry extends SqfEntityTableBase {
  TableCountry() {
    // declare properties of EntityTable
    tableName = 'country';
    primaryKeyName = 'name';
    primaryKeyType = PrimaryKeyType.text;
    useSoftDeleting = false;
    // when useSoftDeleting is true, creates a field named 'isDeleted' on the table, and set to '1' this field when item deleted (does not hard delete)

    // declare fields
    fields = [
      SqfEntityFieldBase('native', DbType.text, isNotNull: true),
      SqfEntityFieldBase('capital', DbType.text, isNotNull: true),
      SqfEntityFieldRelationshipBase(
          TableContinent.getInstance, DeleteRule.CASCADE,
          relationType: RelationType.ONE_TO_MANY, fieldName: 'continent'),
    ];
    super.init();
  }
  static SqfEntityTableBase? _instance;
  static SqfEntityTableBase get getInstance {
    return _instance = _instance ?? TableCountry();
  }
}

// City TABLE
class TableCity extends SqfEntityTableBase {
  TableCity() {
    // declare properties of EntityTable
    tableName = 'city';
    primaryKeyName = 'name';
    primaryKeyType = PrimaryKeyType.text;
    useSoftDeleting = false;
    // when useSoftDeleting is true, creates a field named 'isDeleted' on the table, and set to '1' this field when item deleted (does not hard delete)

    // declare fields
    fields = [
      SqfEntityFieldRelationshipBase(
          TableCountry.getInstance, DeleteRule.CASCADE,
          relationType: RelationType.ONE_TO_MANY, fieldName: 'country'),
    ];
    super.init();
  }
  static SqfEntityTableBase? _instance;
  static SqfEntityTableBase get getInstance {
    return _instance = _instance ?? TableCity();
  }
}
// END TABLES

// BEGIN DATABASE MODEL
class MyDbModel extends SqfEntityModelProvider {
  MyDbModel() {
    databaseName = myDbModel.databaseName;
    password = myDbModel.password;
    dbVersion = myDbModel.dbVersion;
    preSaveAction = myDbModel.preSaveAction;
    logFunction = myDbModel.logFunction;
    databaseTables = [
      TableContinent.getInstance,
      TableCountry.getInstance,
      TableCity.getInstance,
    ];

    bundledDatabasePath = myDbModel
        .bundledDatabasePath; //'assets/sample.db'; // This value is optional. When bundledDatabasePath is empty then EntityBase creats a new database when initializing the database
    databasePath = myDbModel.databasePath;
  }
  Map<String, dynamic> getControllers() {
    final controllers = <String, dynamic>{};

    return controllers;
  }
}
// END DATABASE MODEL

// BEGIN ENTITIES
// region Continent
class Continent extends TableBase {
  Continent({this.code, this.name}) {
    _setDefaultValues();
    softDeleteActivated = false;
  }
  Continent.withFields(this.code, this.name) {
    _setDefaultValues();
  }
  Continent.withId(this.code, this.name) {
    _setDefaultValues();
  }
  // fromMap v2.0
  Continent.fromMap(Map<String, dynamic> o, {bool setDefaultValues = true}) {
    if (setDefaultValues) {
      _setDefaultValues();
    }
    code = o['code'].toString();
    if (o['name'] != null) {
      name = o['name'].toString();
    }

    isSaved = true;
  }
  // FIELDS (Continent)
  String? code;
  String? name;
  bool? isSaved;
  // end FIELDS (Continent)

// COLLECTIONS & VIRTUALS (Continent)
  /// to load children of items to this field, use preload parameter. Ex: toList(preload:true) or toSingle(preload:true) or getById(preload:true)
  /// You can also specify this object into certain preload fields!. Ex: toList(preload:true, preloadFields:['plCountries', 'plField2'..]) or so on..
  List<Country>? plCountries;

  /// get Country(s) filtered by code=continent
  CountryFilterBuilder? getCountries(
      {List<String>? columnsToSelect, bool? getIsDeleted}) {
    if (code == null) {
      return null;
    }
    return Country()
        .select(columnsToSelect: columnsToSelect, getIsDeleted: getIsDeleted)
        .continent
        .equals(code)
        .and;
  }

// END COLLECTIONS & VIRTUALS (Continent)

  static const bool _softDeleteActivated = false;
  ContinentManager? __mnContinent;

  ContinentManager get _mnContinent {
    return __mnContinent = __mnContinent ?? ContinentManager();
  }

  // METHODS
  @override
  Map<String, dynamic> toMap(
      {bool forQuery = false, bool forJson = false, bool forView = false}) {
    final map = <String, dynamic>{};
    map['code'] = code;
    if (name != null || !forView) {
      map['name'] = name;
    }

    return map;
  }

  @override
  Future<Map<String, dynamic>> toMapWithChildren(
      [bool forQuery = false,
      bool forJson = false,
      bool forView = false]) async {
    final map = <String, dynamic>{};
    map['code'] = code;
    if (name != null || !forView) {
      map['name'] = name;
    }

// COLLECTIONS (Continent)
    if (!forQuery) {
      map['Countries'] = await getCountries()!.toMapList();
    }
// END COLLECTIONS (Continent)

    return map;
  }

  /// This method returns Json String [Continent]
  @override
  String toJson() {
    return json.encode(toMap(forJson: true));
  }

  /// This method returns Json String [Continent]
  @override
  Future<String> toJsonWithChilds() async {
    return json.encode(await toMapWithChildren(false, true));
  }

  @override
  List<dynamic> toArgs() {
    return [code, name];
  }

  @override
  List<dynamic> toArgsWithIds() {
    return [code, name];
  }

  static Future<List<Continent>?> fromWebUrl(Uri uri,
      {Map<String, String>? headers}) async {
    try {
      final response = await http.get(uri, headers: headers);
      return await fromJson(response.body);
    } catch (e) {
      debugPrint(
          'SQFENTITY ERROR Continent.fromWebUrl: ErrorMessage: ${e.toString()}');
      return null;
    }
  }

  Future<http.Response> postUrl(Uri uri, {Map<String, String>? headers}) {
    return http.post(uri, headers: headers, body: toJson());
  }

  static Future<List<Continent>> fromJson(String jsonBody) async {
    final Iterable list = await json.decode(jsonBody) as Iterable;
    var objList = <Continent>[];
    try {
      objList = list
          .map((continent) =>
              Continent.fromMap(continent as Map<String, dynamic>))
          .toList();
    } catch (e) {
      debugPrint(
          'SQFENTITY ERROR Continent.fromJson: ErrorMessage: ${e.toString()}');
    }
    return objList;
  }

  static Future<List<Continent>> fromMapList(List<dynamic> data,
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields,
      bool setDefaultValues = true}) async {
    final List<Continent> objList = <Continent>[];
    loadedFields = loadedFields ?? [];
    for (final map in data) {
      final obj = Continent.fromMap(map as Map<String, dynamic>,
          setDefaultValues: setDefaultValues);
      // final List<String> _loadedFields = List<String>.from(loadedFields);

      // RELATIONSHIPS PRELOAD CHILD
      if (preload) {
        loadedFields = loadedFields ?? [];
        if (/*!_loadedfields!.contains('continent.plCountries') && */ (preloadFields ==
                null ||
            preloadFields.contains('plCountries'))) {
          /*_loadedfields!.add('continent.plCountries'); */ obj.plCountries =
              obj.plCountries ??
                  await obj.getCountries()!.toList(
                      preload: preload,
                      preloadFields: preloadFields,
                      loadParents: false /*, loadedFields:_loadedFields*/);
        }
      } // END RELATIONSHIPS PRELOAD CHILD

      objList.add(obj);
    }
    return objList;
  }

  /// returns Continent by ID if exist, otherwise returns null
  /// Primary Keys: String? code
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  /// ex: getById(preload:true) -> Loads all related objects
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  /// ex: getById(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  /// <returns>returns [Continent] if exist, otherwise returns null
  Future<Continent?> getById(String? code,
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    if (code == null) {
      return null;
    }
    Continent? obj;
    final data = await _mnContinent.getById([code]);
    if (data.length != 0) {
      obj = Continent.fromMap(data[0] as Map<String, dynamic>);

      // RELATIONSHIPS PRELOAD CHILD
      if (preload) {
        loadedFields = loadedFields ?? [];
        if (/*!_loadedfields!.contains('continent.plCountries') && */ (preloadFields ==
                null ||
            preloadFields.contains('plCountries'))) {
          /*_loadedfields!.add('continent.plCountries'); */ obj.plCountries =
              obj.plCountries ??
                  await obj.getCountries()!.toList(
                      preload: preload,
                      preloadFields: preloadFields,
                      loadParents: false /*, loadedFields:_loadedFields*/);
        }
      } // END RELATIONSHIPS PRELOAD CHILD

    } else {
      obj = null;
    }
    return obj;
  }

  /// Saves the (Continent) object. If the Primary Key (code) field is null, returns Error.
  /// INSERTS (If not exist) OR REPLACES (If exist) data while Primary Key is not null.
  /// Call the saveAs() method if you do not want to save it when there is another row with the same code
  /// <returns>Returns BoolResult
  @override
  Future<BoolResult> save({bool ignoreBatch = true}) async {
    final result = BoolResult(success: false);
    try {
      await _mnContinent.rawInsert(
          'INSERT ${isSaved! ? 'OR REPLACE' : ''} INTO continent (code, name)  VALUES (?,?)',
          toArgsWithIds(),
          ignoreBatch);
      result.success = true;
      isSaved = true;
    } catch (e) {
      result.errorMessage = e.toString();
    }

    saveResult = result;
    return result;
  }

  /// saveAll method saves the sent List<Continent> as a bulk in one transaction
  /// Returns a <List<BoolResult>>
  static Future<List<dynamic>> saveAll(List<Continent> continents,
      {bool? exclusive, bool? noResult, bool? continueOnError}) async {
    List<dynamic>? result = [];
    // If there is no open transaction, start one
    final isStartedBatch = await MyDbModel().batchStart();
    for (final obj in continents) {
      await obj.save();
    }
    if (!isStartedBatch) {
      result = await MyDbModel().batchCommit(
          exclusive: exclusive,
          noResult: noResult,
          continueOnError: continueOnError);
    }
    return result!;
  }

  /// Updates if the record exists, otherwise adds a new row
  /// <returns>Returns 1
  @override
  Future<int?> upsert({bool ignoreBatch = true}) async {
    try {
      final result = await _mnContinent.rawInsert(
          'INSERT OR REPLACE INTO continent (code, name)  VALUES (?,?)',
          [code, name],
          ignoreBatch);
      if (result! > 0) {
        saveResult = BoolResult(
            success: true,
            successMessage: 'Continent code=$code updated successfully');
      } else {
        saveResult = BoolResult(
            success: false,
            errorMessage: 'Continent code=$code did not update');
      }
      return 1;
    } catch (e) {
      saveResult = BoolResult(
          success: false,
          errorMessage: 'Continent Save failed. Error: ${e.toString()}');
      return null;
    }
  }

  /// Deletes Continent

  /// <returns>BoolResult res.success= true (Deleted), false (Could not be deleted)
  @override
  Future<BoolResult> delete([bool hardDelete = false]) async {
    debugPrint('SQFENTITIY: delete Continent invoked (code=$code)');
    var result = BoolResult(success: false);
    {
      result = await Country()
          .select()
          .continent
          .equals(code)
          .and
          .delete(hardDelete);
    }
    if (!result.success) {
      return result;
    }
    if (!_softDeleteActivated || hardDelete) {
      return _mnContinent
          .delete(QueryParams(whereString: 'code=?', whereArguments: [code]));
    } else {
      return _mnContinent.updateBatch(
          QueryParams(whereString: 'code=?', whereArguments: [code]),
          {'isDeleted': 1});
    }
  }

  @override
  Future<BoolResult> recover([bool recoverChilds = true]) {
    // not implemented because:
    final msg =
        'set useSoftDeleting:true in the table definition of [Continent] to use this feature';
    throw UnimplementedError(msg);
  }

  @override
  ContinentFilterBuilder select(
      {List<String>? columnsToSelect, bool? getIsDeleted}) {
    return ContinentFilterBuilder(this, getIsDeleted)
      ..qparams.selectColumns = columnsToSelect;
  }

  @override
  ContinentFilterBuilder distinct(
      {List<String>? columnsToSelect, bool? getIsDeleted}) {
    return ContinentFilterBuilder(this, getIsDeleted)
      ..qparams.selectColumns = columnsToSelect
      ..qparams.distinct = true;
  }

  void _setDefaultValues() {
    isSaved = false;
  }

  @override
  void rollbackPk() {
    if (isInsert == true) {
      code = null;
    }
  }

  // END METHODS
  // BEGIN CUSTOM CODE
  /*
      you can define customCode property of your SqfEntityTable constant. For example:
      const tablePerson = SqfEntityTable(
      tableName: 'person',
      primaryKeyName: 'id',
      primaryKeyType: PrimaryKeyType.integer_auto_incremental,
      fields: [
        SqfEntityField('firstName', DbType.text),
        SqfEntityField('lastName', DbType.text),
      ],
      customCode: '''
       String fullName()
       { 
         return '$firstName $lastName';
       }
      ''');
     */
  // END CUSTOM CODE
}
// endregion continent

// region ContinentField
class ContinentField extends FilterBase {
  ContinentField(ContinentFilterBuilder continentFB) : super(continentFB);

  @override
  ContinentFilterBuilder equals(dynamic pValue) {
    return super.equals(pValue) as ContinentFilterBuilder;
  }

  @override
  ContinentFilterBuilder equalsOrNull(dynamic pValue) {
    return super.equalsOrNull(pValue) as ContinentFilterBuilder;
  }

  @override
  ContinentFilterBuilder isNull() {
    return super.isNull() as ContinentFilterBuilder;
  }

  @override
  ContinentFilterBuilder contains(dynamic pValue) {
    return super.contains(pValue) as ContinentFilterBuilder;
  }

  @override
  ContinentFilterBuilder startsWith(dynamic pValue) {
    return super.startsWith(pValue) as ContinentFilterBuilder;
  }

  @override
  ContinentFilterBuilder endsWith(dynamic pValue) {
    return super.endsWith(pValue) as ContinentFilterBuilder;
  }

  @override
  ContinentFilterBuilder between(dynamic pFirst, dynamic pLast) {
    return super.between(pFirst, pLast) as ContinentFilterBuilder;
  }

  @override
  ContinentFilterBuilder greaterThan(dynamic pValue) {
    return super.greaterThan(pValue) as ContinentFilterBuilder;
  }

  @override
  ContinentFilterBuilder lessThan(dynamic pValue) {
    return super.lessThan(pValue) as ContinentFilterBuilder;
  }

  @override
  ContinentFilterBuilder greaterThanOrEquals(dynamic pValue) {
    return super.greaterThanOrEquals(pValue) as ContinentFilterBuilder;
  }

  @override
  ContinentFilterBuilder lessThanOrEquals(dynamic pValue) {
    return super.lessThanOrEquals(pValue) as ContinentFilterBuilder;
  }

  @override
  ContinentFilterBuilder inValues(dynamic pValue) {
    return super.inValues(pValue) as ContinentFilterBuilder;
  }

  @override
  ContinentField get not {
    return super.not as ContinentField;
  }
}
// endregion ContinentField

// region ContinentFilterBuilder
class ContinentFilterBuilder extends ConjunctionBase {
  ContinentFilterBuilder(Continent obj, bool? getIsDeleted)
      : super(obj, getIsDeleted) {
    _mnContinent = obj._mnContinent;
    _softDeleteActivated = obj.softDeleteActivated;
  }

  bool _softDeleteActivated = false;
  ContinentManager? _mnContinent;

  /// put the sql keyword 'AND'
  @override
  ContinentFilterBuilder get and {
    super.and;
    return this;
  }

  /// put the sql keyword 'OR'
  @override
  ContinentFilterBuilder get or {
    super.or;
    return this;
  }

  /// open parentheses
  @override
  ContinentFilterBuilder get startBlock {
    super.startBlock;
    return this;
  }

  /// String whereCriteria, write raw query without 'where' keyword. Like this: 'field1 like 'test%' and field2 = 3'
  @override
  ContinentFilterBuilder where(String? whereCriteria,
      {dynamic parameterValue}) {
    super.where(whereCriteria, parameterValue: parameterValue);
    return this;
  }

  /// page = page number,
  /// pagesize = row(s) per page
  @override
  ContinentFilterBuilder page(int page, int pagesize) {
    super.page(page, pagesize);
    return this;
  }

  /// int count = LIMIT
  @override
  ContinentFilterBuilder top(int count) {
    super.top(count);
    return this;
  }

  /// close parentheses
  @override
  ContinentFilterBuilder get endBlock {
    super.endBlock;
    return this;
  }

  /// argFields might be String or List<String>.
  /// Example 1: argFields='name, date'
  /// Example 2: argFields = ['name', 'date']
  @override
  ContinentFilterBuilder orderBy(dynamic argFields) {
    super.orderBy(argFields);
    return this;
  }

  /// argFields might be String or List<String>.
  /// Example 1: argFields='field1, field2'
  /// Example 2: argFields = ['field1', 'field2']
  @override
  ContinentFilterBuilder orderByDesc(dynamic argFields) {
    super.orderByDesc(argFields);
    return this;
  }

  /// argFields might be String or List<String>.
  /// Example 1: argFields='field1, field2'
  /// Example 2: argFields = ['field1', 'field2']
  @override
  ContinentFilterBuilder groupBy(dynamic argFields) {
    super.groupBy(argFields);
    return this;
  }

  /// argFields might be String or List<String>.
  /// Example 1: argFields='name, date'
  /// Example 2: argFields = ['name', 'date']
  @override
  ContinentFilterBuilder having(dynamic argFields) {
    super.having(argFields);
    return this;
  }

  ContinentField _setField(
      ContinentField? field, String colName, DbType dbtype) {
    return ContinentField(this)
      ..param = DbParameter(
          dbType: dbtype, columnName: colName, wStartBlock: openedBlock);
  }

  ContinentField? _code;
  ContinentField get code {
    return _code = _setField(_code, 'code', DbType.integer);
  }

  ContinentField? _name;
  ContinentField get name {
    return _name = _setField(_name, 'name', DbType.text);
  }

  /// Deletes List<Continent> bulk by query
  ///
  /// <returns>BoolResult res.success= true (Deleted), false (Could not be deleted)
  @override
  Future<BoolResult> delete([bool hardDelete = false]) async {
    buildParameters();
    var r = BoolResult(success: false);
    // Delete sub records where in (Country) according to DeleteRule.CASCADE
    final idListCountryBYcontinent = toListPrimaryKeySQL(false);
    final resCountryBYcontinent = await Country()
        .select()
        .where('continent IN (${idListCountryBYcontinent['sql']})',
            parameterValue: idListCountryBYcontinent['args'])
        .delete(hardDelete);
    if (!resCountryBYcontinent.success) {
      return resCountryBYcontinent;
    }

    if (_softDeleteActivated && !hardDelete) {
      r = await _mnContinent!.updateBatch(qparams, {'isDeleted': 1});
    } else {
      r = await _mnContinent!.delete(qparams);
    }
    return r;
  }

  /// using:
  /// update({'fieldName': Value})
  /// fieldName must be String. Value is dynamic, it can be any of the (int, bool, String.. )
  @override
  Future<BoolResult> update(Map<String, dynamic> values) {
    buildParameters();
    if (qparams.limit! > 0 || qparams.offset! > 0) {
      qparams.whereString =
          'code IN (SELECT code from continent ${qparams.whereString!.isNotEmpty ? 'WHERE ${qparams.whereString}' : ''}${qparams.limit! > 0 ? ' LIMIT ${qparams.limit}' : ''}${qparams.offset! > 0 ? ' OFFSET ${qparams.offset}' : ''})';
    }
    return _mnContinent!.updateBatch(qparams, values);
  }

  /// This method always returns [Continent] Obj if exist, otherwise returns null
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  /// ex: toSingle(preload:true) -> Loads all related objects
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  /// ex: toSingle(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  /// <returns> Continent?
  @override
  Future<Continent?> toSingle(
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    buildParameters(pSize: 1);
    final objFuture = _mnContinent!.toList(qparams);
    final data = await objFuture;
    Continent? obj;
    if (data.isNotEmpty) {
      obj = Continent.fromMap(data[0] as Map<String, dynamic>);

      // RELATIONSHIPS PRELOAD CHILD
      if (preload) {
        loadedFields = loadedFields ?? [];
        if (/*!_loadedfields!.contains('continent.plCountries') && */ (preloadFields ==
                null ||
            preloadFields.contains('plCountries'))) {
          /*_loadedfields!.add('continent.plCountries'); */ obj.plCountries =
              obj.plCountries ??
                  await obj.getCountries()!.toList(
                      preload: preload,
                      preloadFields: preloadFields,
                      loadParents: false /*, loadedFields:_loadedFields*/);
        }
      } // END RELATIONSHIPS PRELOAD CHILD

    } else {
      obj = null;
    }
    return obj;
  }

  /// This method always returns [Continent]
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  /// ex: toSingle(preload:true) -> Loads all related objects
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  /// ex: toSingle(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  /// <returns> Continent?
  @override
  Future<Continent> toSingleOrDefault(
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    return await toSingle(
            preload: preload,
            preloadFields: preloadFields,
            loadParents: loadParents,
            loadedFields: loadedFields) ??
        Continent();
  }

  /// This method returns int. [Continent]
  /// <returns>int
  @override
  Future<int> toCount([VoidCallback Function(int c)? continentCount]) async {
    buildParameters();
    qparams.selectColumns = ['COUNT(1) AS CNT'];
    final continentsFuture = await _mnContinent!.toList(qparams);
    final int count = continentsFuture[0]['CNT'] as int;
    if (continentCount != null) {
      continentCount(count);
    }
    return count;
  }

  /// This method returns List<Continent> [Continent]
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  /// ex: toList(preload:true) -> Loads all related objects
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  /// ex: toList(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  /// <returns>List<Continent>
  @override
  Future<List<Continent>> toList(
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    final data = await toMapList();
    final List<Continent> continentsData = await Continent.fromMapList(data,
        preload: preload,
        preloadFields: preloadFields,
        loadParents: loadParents,
        loadedFields: loadedFields,
        setDefaultValues: qparams.selectColumns == null);
    return continentsData;
  }

  /// This method returns Json String [Continent]
  @override
  Future<String> toJson() async {
    final list = <dynamic>[];
    final data = await toList();
    for (var o in data) {
      list.add(o.toMap(forJson: true));
    }
    return json.encode(list);
  }

  /// This method returns Json String. [Continent]
  @override
  Future<String> toJsonWithChilds() async {
    final list = <dynamic>[];
    final data = await toList();
    for (var o in data) {
      list.add(await o.toMapWithChildren(false, true));
    }
    return json.encode(list);
  }

  /// This method returns List<dynamic>. [Continent]
  /// <returns>List<dynamic>
  @override
  Future<List<dynamic>> toMapList() async {
    buildParameters();
    return await _mnContinent!.toList(qparams);
  }

  /// This method returns Primary Key List SQL and Parameters retVal = Map<String,dynamic>. [Continent]
  /// retVal['sql'] = SQL statement string, retVal['args'] = whereArguments List<dynamic>;
  /// <returns>List<String>
  @override
  Map<String, dynamic> toListPrimaryKeySQL([bool buildParams = true]) {
    final Map<String, dynamic> _retVal = <String, dynamic>{};
    if (buildParams) {
      buildParameters();
    }
    _retVal['sql'] =
        'SELECT `code` FROM continent WHERE ${qparams.whereString}';
    _retVal['args'] = qparams.whereArguments;
    return _retVal;
  }

  /// This method returns Primary Key List<String>.
  /// <returns>List<String>
  @override
  Future<List<String>> toListPrimaryKey([bool buildParams = true]) async {
    if (buildParams) {
      buildParameters();
    }
    final List<String> codeData = <String>[];
    qparams.selectColumns = ['code'];
    final codeFuture = await _mnContinent!.toList(qparams);

    final int count = codeFuture.length;
    for (int i = 0; i < count; i++) {
      codeData.add(codeFuture[i]['code'] as String);
    }
    return codeData;
  }

  /// Returns List<dynamic> for selected columns. Use this method for 'groupBy' with min,max,avg..  [Continent]
  /// Sample usage: (see EXAMPLE 4.2 at https://github.com/hhtokpinar/sqfEntity#group-by)
  @override
  Future<List<dynamic>> toListObject() async {
    buildParameters();

    final objectFuture = _mnContinent!.toList(qparams);

    final List<dynamic> objectsData = <dynamic>[];
    final data = await objectFuture;
    final int count = data.length;
    for (int i = 0; i < count; i++) {
      objectsData.add(data[i]);
    }
    return objectsData;
  }

  /// Returns List<String> for selected first column
  /// Sample usage: await Continent.select(columnsToSelect: ['columnName']).toListString()
  @override
  Future<List<String>> toListString(
      [VoidCallback Function(List<String> o)? listString]) async {
    buildParameters();

    final objectFuture = _mnContinent!.toList(qparams);

    final List<String> objectsData = <String>[];
    final data = await objectFuture;
    final int count = data.length;
    for (int i = 0; i < count; i++) {
      objectsData.add(data[i][qparams.selectColumns![0]].toString());
    }
    if (listString != null) {
      listString(objectsData);
    }
    return objectsData;
  }
}
// endregion ContinentFilterBuilder

// region ContinentFields
class ContinentFields {
  static TableField? _fCode;
  static TableField get code {
    return _fCode =
        _fCode ?? SqlSyntax.setField(_fCode, 'code', DbType.integer);
  }

  static TableField? _fName;
  static TableField get name {
    return _fName = _fName ?? SqlSyntax.setField(_fName, 'name', DbType.text);
  }
}
// endregion ContinentFields

//region ContinentManager
class ContinentManager extends SqfEntityProvider {
  ContinentManager()
      : super(MyDbModel(),
            tableName: _tableName,
            primaryKeyList: _primaryKeyList,
            whereStr: _whereStr);
  static const String _tableName = 'continent';
  static const List<String> _primaryKeyList = ['code'];
  static const String _whereStr = 'code=?';
}

//endregion ContinentManager
// region Country
class Country extends TableBase {
  Country({this.name, this.native, this.capital, this.continent}) {
    _setDefaultValues();
    softDeleteActivated = false;
  }
  Country.withFields(this.name, this.native, this.capital, this.continent) {
    _setDefaultValues();
  }
  Country.withId(this.name, this.native, this.capital, this.continent) {
    _setDefaultValues();
  }
  // fromMap v2.0
  Country.fromMap(Map<String, dynamic> o, {bool setDefaultValues = true}) {
    if (setDefaultValues) {
      _setDefaultValues();
    }
    name = o['name'].toString();
    if (o['native'] != null) {
      native = o['native'].toString();
    }
    if (o['capital'] != null) {
      capital = o['capital'].toString();
    }
    continent = o['continent'].toString();

    // RELATIONSHIPS FromMAP
    plContinent = o['plContinent'] != null
        ? Continent.fromMap(o['plContinent'] as Map<String, dynamic>)
        : null;
    // END RELATIONSHIPS FromMAP

    isSaved = true;
  }
  // FIELDS (Country)
  String? name;
  String? native;
  String? capital;
  String? continent;
  bool? isSaved;
  // end FIELDS (Country)

// RELATIONSHIPS (Country)
  /// to load parent of items to this field, use preload parameter ex: toList(preload:true) or toSingle(preload:true) or getById(preload:true)
  /// You can also specify this object into certain preload fields!. Ex: toList(preload:true, preloadFields:['plContinent', 'plField2'..]) or so on..
  Continent? plContinent;

  /// get Continent By Continent
  Future<Continent?> getContinent(
      {bool loadParents = false, List<String>? loadedFields}) async {
    final _obj = await Continent().getById(continent,
        loadParents: loadParents, loadedFields: loadedFields);
    return _obj;
  }
  // END RELATIONSHIPS (Country)

// COLLECTIONS & VIRTUALS (Country)
  /// to load children of items to this field, use preload parameter. Ex: toList(preload:true) or toSingle(preload:true) or getById(preload:true)
  /// You can also specify this object into certain preload fields!. Ex: toList(preload:true, preloadFields:['plCities', 'plField2'..]) or so on..
  List<City>? plCities;

  /// get City(s) filtered by name=country
  CityFilterBuilder? getCities(
      {List<String>? columnsToSelect, bool? getIsDeleted}) {
    if (name == null) {
      return null;
    }
    return City()
        .select(columnsToSelect: columnsToSelect, getIsDeleted: getIsDeleted)
        .country
        .equals(name)
        .and;
  }

// END COLLECTIONS & VIRTUALS (Country)

  static const bool _softDeleteActivated = false;
  CountryManager? __mnCountry;

  CountryManager get _mnCountry {
    return __mnCountry = __mnCountry ?? CountryManager();
  }

  // METHODS
  @override
  Map<String, dynamic> toMap(
      {bool forQuery = false, bool forJson = false, bool forView = false}) {
    final map = <String, dynamic>{};
    map['name'] = name;
    if (native != null || !forView) {
      map['native'] = native;
    }
    if (capital != null || !forView) {
      map['capital'] = capital;
    }
    if (continent != null) {
      map['continent'] = forView
          ? plContinent == null
              ? continent
              : plContinent!.name
          : continent;
    } else if (continent != null || !forView) {
      map['continent'] = null;
    }

    return map;
  }

  @override
  Future<Map<String, dynamic>> toMapWithChildren(
      [bool forQuery = false,
      bool forJson = false,
      bool forView = false]) async {
    final map = <String, dynamic>{};
    map['name'] = name;
    if (native != null || !forView) {
      map['native'] = native;
    }
    if (capital != null || !forView) {
      map['capital'] = capital;
    }
    if (continent != null) {
      map['continent'] = forView
          ? plContinent == null
              ? continent
              : plContinent!.name
          : continent;
    } else if (continent != null || !forView) {
      map['continent'] = null;
    }

// COLLECTIONS (Country)
    if (!forQuery) {
      map['Cities'] = await getCities()!.toMapList();
    }
// END COLLECTIONS (Country)

    return map;
  }

  /// This method returns Json String [Country]
  @override
  String toJson() {
    return json.encode(toMap(forJson: true));
  }

  /// This method returns Json String [Country]
  @override
  Future<String> toJsonWithChilds() async {
    return json.encode(await toMapWithChildren(false, true));
  }

  @override
  List<dynamic> toArgs() {
    return [name, native, capital, continent];
  }

  @override
  List<dynamic> toArgsWithIds() {
    return [name, native, capital, continent];
  }

  static Future<List<Country>?> fromWebUrl(Uri uri,
      {Map<String, String>? headers}) async {
    try {
      final response = await http.get(uri, headers: headers);
      return await fromJson(response.body);
    } catch (e) {
      debugPrint(
          'SQFENTITY ERROR Country.fromWebUrl: ErrorMessage: ${e.toString()}');
      return null;
    }
  }

  Future<http.Response> postUrl(Uri uri, {Map<String, String>? headers}) {
    return http.post(uri, headers: headers, body: toJson());
  }

  static Future<List<Country>> fromJson(String jsonBody) async {
    final Iterable list = await json.decode(jsonBody) as Iterable;
    var objList = <Country>[];
    try {
      objList = list
          .map((country) => Country.fromMap(country as Map<String, dynamic>))
          .toList();
    } catch (e) {
      debugPrint(
          'SQFENTITY ERROR Country.fromJson: ErrorMessage: ${e.toString()}');
    }
    return objList;
  }

  static Future<List<Country>> fromMapList(List<dynamic> data,
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields,
      bool setDefaultValues = true}) async {
    final List<Country> objList = <Country>[];
    loadedFields = loadedFields ?? [];
    for (final map in data) {
      final obj = Country.fromMap(map as Map<String, dynamic>,
          setDefaultValues: setDefaultValues);
      // final List<String> _loadedFields = List<String>.from(loadedFields);

      // RELATIONSHIPS PRELOAD CHILD
      if (preload) {
        loadedFields = loadedFields ?? [];
        if (/*!_loadedfields!.contains('country.plCities') && */ (preloadFields ==
                null ||
            preloadFields.contains('plCities'))) {
          /*_loadedfields!.add('country.plCities'); */ obj.plCities =
              obj.plCities ??
                  await obj.getCities()!.toList(
                      preload: preload,
                      preloadFields: preloadFields,
                      loadParents: false /*, loadedFields:_loadedFields*/);
        }
      } // END RELATIONSHIPS PRELOAD CHILD

      // RELATIONSHIPS PRELOAD
      if (preload || loadParents) {
        loadedFields = loadedFields ?? [];
        if ((preloadFields == null ||
            loadParents ||
            preloadFields.contains('plContinent'))) {
          obj.plContinent = obj.plContinent ??
              await obj.getContinent(loadParents: loadParents);
        }
      } // END RELATIONSHIPS PRELOAD

      objList.add(obj);
    }
    return objList;
  }

  /// returns Country by ID if exist, otherwise returns null
  /// Primary Keys: String? name
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  /// ex: getById(preload:true) -> Loads all related objects
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  /// ex: getById(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  /// <returns>returns [Country] if exist, otherwise returns null
  Future<Country?> getById(String? name,
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    if (name == null) {
      return null;
    }
    Country? obj;
    final data = await _mnCountry.getById([name]);
    if (data.length != 0) {
      obj = Country.fromMap(data[0] as Map<String, dynamic>);

      // RELATIONSHIPS PRELOAD CHILD
      if (preload) {
        loadedFields = loadedFields ?? [];
        if (/*!_loadedfields!.contains('country.plCities') && */ (preloadFields ==
                null ||
            preloadFields.contains('plCities'))) {
          /*_loadedfields!.add('country.plCities'); */ obj.plCities =
              obj.plCities ??
                  await obj.getCities()!.toList(
                      preload: preload,
                      preloadFields: preloadFields,
                      loadParents: false /*, loadedFields:_loadedFields*/);
        }
      } // END RELATIONSHIPS PRELOAD CHILD

      // RELATIONSHIPS PRELOAD
      if (preload || loadParents) {
        loadedFields = loadedFields ?? [];
        if ((preloadFields == null ||
            loadParents ||
            preloadFields.contains('plContinent'))) {
          obj.plContinent = obj.plContinent ??
              await obj.getContinent(loadParents: loadParents);
        }
      } // END RELATIONSHIPS PRELOAD

    } else {
      obj = null;
    }
    return obj;
  }

  /// Saves the (Country) object. If the Primary Key (name) field is null, returns Error.
  /// INSERTS (If not exist) OR REPLACES (If exist) data while Primary Key is not null.
  /// Call the saveAs() method if you do not want to save it when there is another row with the same name
  /// <returns>Returns BoolResult
  @override
  Future<BoolResult> save({bool ignoreBatch = true}) async {
    final result = BoolResult(success: false);
    try {
      await _mnCountry.rawInsert(
          'INSERT ${isSaved! ? 'OR REPLACE' : ''} INTO country (name, native, capital, continent)  VALUES (?,?,?,?)',
          toArgsWithIds(),
          ignoreBatch);
      result.success = true;
      isSaved = true;
    } catch (e) {
      result.errorMessage = e.toString();
    }

    saveResult = result;
    return result;
  }

  /// saveAll method saves the sent List<Country> as a bulk in one transaction
  /// Returns a <List<BoolResult>>
  static Future<List<dynamic>> saveAll(List<Country> countries,
      {bool? exclusive, bool? noResult, bool? continueOnError}) async {
    List<dynamic>? result = [];
    // If there is no open transaction, start one
    final isStartedBatch = await MyDbModel().batchStart();
    for (final obj in countries) {
      await obj.save();
    }
    if (!isStartedBatch) {
      result = await MyDbModel().batchCommit(
          exclusive: exclusive,
          noResult: noResult,
          continueOnError: continueOnError);
    }
    return result!;
  }

  /// Updates if the record exists, otherwise adds a new row
  /// <returns>Returns 1
  @override
  Future<int?> upsert({bool ignoreBatch = true}) async {
    try {
      final result = await _mnCountry.rawInsert(
          'INSERT OR REPLACE INTO country (name, native, capital, continent)  VALUES (?,?,?,?)',
          [name, native, capital, continent],
          ignoreBatch);
      if (result! > 0) {
        saveResult = BoolResult(
            success: true,
            successMessage: 'Country name=$name updated successfully');
      } else {
        saveResult = BoolResult(
            success: false, errorMessage: 'Country name=$name did not update');
      }
      return 1;
    } catch (e) {
      saveResult = BoolResult(
          success: false,
          errorMessage: 'Country Save failed. Error: ${e.toString()}');
      return null;
    }
  }

  /// Deletes Country

  /// <returns>BoolResult res.success= true (Deleted), false (Could not be deleted)
  @override
  Future<BoolResult> delete([bool hardDelete = false]) async {
    debugPrint('SQFENTITIY: delete Country invoked (name=$name)');
    var result = BoolResult(success: false);
    {
      result =
          await City().select().country.equals(name).and.delete(hardDelete);
    }
    if (!result.success) {
      return result;
    }
    if (!_softDeleteActivated || hardDelete) {
      return _mnCountry
          .delete(QueryParams(whereString: 'name=?', whereArguments: [name]));
    } else {
      return _mnCountry.updateBatch(
          QueryParams(whereString: 'name=?', whereArguments: [name]),
          {'isDeleted': 1});
    }
  }

  @override
  Future<BoolResult> recover([bool recoverChilds = true]) {
    // not implemented because:
    final msg =
        'set useSoftDeleting:true in the table definition of [Country] to use this feature';
    throw UnimplementedError(msg);
  }

  @override
  CountryFilterBuilder select(
      {List<String>? columnsToSelect, bool? getIsDeleted}) {
    return CountryFilterBuilder(this, getIsDeleted)
      ..qparams.selectColumns = columnsToSelect;
  }

  @override
  CountryFilterBuilder distinct(
      {List<String>? columnsToSelect, bool? getIsDeleted}) {
    return CountryFilterBuilder(this, getIsDeleted)
      ..qparams.selectColumns = columnsToSelect
      ..qparams.distinct = true;
  }

  void _setDefaultValues() {
    isSaved = false;
  }

  @override
  void rollbackPk() {
    if (isInsert == true) {
      name = null;
    }
  }

  // END METHODS
  // BEGIN CUSTOM CODE
  /*
      you can define customCode property of your SqfEntityTable constant. For example:
      const tablePerson = SqfEntityTable(
      tableName: 'person',
      primaryKeyName: 'id',
      primaryKeyType: PrimaryKeyType.integer_auto_incremental,
      fields: [
        SqfEntityField('firstName', DbType.text),
        SqfEntityField('lastName', DbType.text),
      ],
      customCode: '''
       String fullName()
       { 
         return '$firstName $lastName';
       }
      ''');
     */
  // END CUSTOM CODE
}
// endregion country

// region CountryField
class CountryField extends FilterBase {
  CountryField(CountryFilterBuilder countryFB) : super(countryFB);

  @override
  CountryFilterBuilder equals(dynamic pValue) {
    return super.equals(pValue) as CountryFilterBuilder;
  }

  @override
  CountryFilterBuilder equalsOrNull(dynamic pValue) {
    return super.equalsOrNull(pValue) as CountryFilterBuilder;
  }

  @override
  CountryFilterBuilder isNull() {
    return super.isNull() as CountryFilterBuilder;
  }

  @override
  CountryFilterBuilder contains(dynamic pValue) {
    return super.contains(pValue) as CountryFilterBuilder;
  }

  @override
  CountryFilterBuilder startsWith(dynamic pValue) {
    return super.startsWith(pValue) as CountryFilterBuilder;
  }

  @override
  CountryFilterBuilder endsWith(dynamic pValue) {
    return super.endsWith(pValue) as CountryFilterBuilder;
  }

  @override
  CountryFilterBuilder between(dynamic pFirst, dynamic pLast) {
    return super.between(pFirst, pLast) as CountryFilterBuilder;
  }

  @override
  CountryFilterBuilder greaterThan(dynamic pValue) {
    return super.greaterThan(pValue) as CountryFilterBuilder;
  }

  @override
  CountryFilterBuilder lessThan(dynamic pValue) {
    return super.lessThan(pValue) as CountryFilterBuilder;
  }

  @override
  CountryFilterBuilder greaterThanOrEquals(dynamic pValue) {
    return super.greaterThanOrEquals(pValue) as CountryFilterBuilder;
  }

  @override
  CountryFilterBuilder lessThanOrEquals(dynamic pValue) {
    return super.lessThanOrEquals(pValue) as CountryFilterBuilder;
  }

  @override
  CountryFilterBuilder inValues(dynamic pValue) {
    return super.inValues(pValue) as CountryFilterBuilder;
  }

  @override
  CountryField get not {
    return super.not as CountryField;
  }
}
// endregion CountryField

// region CountryFilterBuilder
class CountryFilterBuilder extends ConjunctionBase {
  CountryFilterBuilder(Country obj, bool? getIsDeleted)
      : super(obj, getIsDeleted) {
    _mnCountry = obj._mnCountry;
    _softDeleteActivated = obj.softDeleteActivated;
  }

  bool _softDeleteActivated = false;
  CountryManager? _mnCountry;

  /// put the sql keyword 'AND'
  @override
  CountryFilterBuilder get and {
    super.and;
    return this;
  }

  /// put the sql keyword 'OR'
  @override
  CountryFilterBuilder get or {
    super.or;
    return this;
  }

  /// open parentheses
  @override
  CountryFilterBuilder get startBlock {
    super.startBlock;
    return this;
  }

  /// String whereCriteria, write raw query without 'where' keyword. Like this: 'field1 like 'test%' and field2 = 3'
  @override
  CountryFilterBuilder where(String? whereCriteria, {dynamic parameterValue}) {
    super.where(whereCriteria, parameterValue: parameterValue);
    return this;
  }

  /// page = page number,
  /// pagesize = row(s) per page
  @override
  CountryFilterBuilder page(int page, int pagesize) {
    super.page(page, pagesize);
    return this;
  }

  /// int count = LIMIT
  @override
  CountryFilterBuilder top(int count) {
    super.top(count);
    return this;
  }

  /// close parentheses
  @override
  CountryFilterBuilder get endBlock {
    super.endBlock;
    return this;
  }

  /// argFields might be String or List<String>.
  /// Example 1: argFields='name, date'
  /// Example 2: argFields = ['name', 'date']
  @override
  CountryFilterBuilder orderBy(dynamic argFields) {
    super.orderBy(argFields);
    return this;
  }

  /// argFields might be String or List<String>.
  /// Example 1: argFields='field1, field2'
  /// Example 2: argFields = ['field1', 'field2']
  @override
  CountryFilterBuilder orderByDesc(dynamic argFields) {
    super.orderByDesc(argFields);
    return this;
  }

  /// argFields might be String or List<String>.
  /// Example 1: argFields='field1, field2'
  /// Example 2: argFields = ['field1', 'field2']
  @override
  CountryFilterBuilder groupBy(dynamic argFields) {
    super.groupBy(argFields);
    return this;
  }

  /// argFields might be String or List<String>.
  /// Example 1: argFields='name, date'
  /// Example 2: argFields = ['name', 'date']
  @override
  CountryFilterBuilder having(dynamic argFields) {
    super.having(argFields);
    return this;
  }

  CountryField _setField(CountryField? field, String colName, DbType dbtype) {
    return CountryField(this)
      ..param = DbParameter(
          dbType: dbtype, columnName: colName, wStartBlock: openedBlock);
  }

  CountryField? _name;
  CountryField get name {
    return _name = _setField(_name, 'name', DbType.integer);
  }

  CountryField? _native;
  CountryField get native {
    return _native = _setField(_native, 'native', DbType.text);
  }

  CountryField? _capital;
  CountryField get capital {
    return _capital = _setField(_capital, 'capital', DbType.text);
  }

  CountryField? _continent;
  CountryField get continent {
    return _continent = _setField(_continent, 'continent', DbType.text);
  }

  /// Deletes List<Country> bulk by query
  ///
  /// <returns>BoolResult res.success= true (Deleted), false (Could not be deleted)
  @override
  Future<BoolResult> delete([bool hardDelete = false]) async {
    buildParameters();
    var r = BoolResult(success: false);
    // Delete sub records where in (City) according to DeleteRule.CASCADE
    final idListCityBYcountry = toListPrimaryKeySQL(false);
    final resCityBYcountry = await City()
        .select()
        .where('country IN (${idListCityBYcountry['sql']})',
            parameterValue: idListCityBYcountry['args'])
        .delete(hardDelete);
    if (!resCityBYcountry.success) {
      return resCityBYcountry;
    }

    if (_softDeleteActivated && !hardDelete) {
      r = await _mnCountry!.updateBatch(qparams, {'isDeleted': 1});
    } else {
      r = await _mnCountry!.delete(qparams);
    }
    return r;
  }

  /// using:
  /// update({'fieldName': Value})
  /// fieldName must be String. Value is dynamic, it can be any of the (int, bool, String.. )
  @override
  Future<BoolResult> update(Map<String, dynamic> values) {
    buildParameters();
    if (qparams.limit! > 0 || qparams.offset! > 0) {
      qparams.whereString =
          'name IN (SELECT name from country ${qparams.whereString!.isNotEmpty ? 'WHERE ${qparams.whereString}' : ''}${qparams.limit! > 0 ? ' LIMIT ${qparams.limit}' : ''}${qparams.offset! > 0 ? ' OFFSET ${qparams.offset}' : ''})';
    }
    return _mnCountry!.updateBatch(qparams, values);
  }

  /// This method always returns [Country] Obj if exist, otherwise returns null
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  /// ex: toSingle(preload:true) -> Loads all related objects
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  /// ex: toSingle(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  /// <returns> Country?
  @override
  Future<Country?> toSingle(
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    buildParameters(pSize: 1);
    final objFuture = _mnCountry!.toList(qparams);
    final data = await objFuture;
    Country? obj;
    if (data.isNotEmpty) {
      obj = Country.fromMap(data[0] as Map<String, dynamic>);

      // RELATIONSHIPS PRELOAD CHILD
      if (preload) {
        loadedFields = loadedFields ?? [];
        if (/*!_loadedfields!.contains('country.plCities') && */ (preloadFields ==
                null ||
            preloadFields.contains('plCities'))) {
          /*_loadedfields!.add('country.plCities'); */ obj.plCities =
              obj.plCities ??
                  await obj.getCities()!.toList(
                      preload: preload,
                      preloadFields: preloadFields,
                      loadParents: false /*, loadedFields:_loadedFields*/);
        }
      } // END RELATIONSHIPS PRELOAD CHILD

      // RELATIONSHIPS PRELOAD
      if (preload || loadParents) {
        loadedFields = loadedFields ?? [];
        if ((preloadFields == null ||
            loadParents ||
            preloadFields.contains('plContinent'))) {
          obj.plContinent = obj.plContinent ??
              await obj.getContinent(loadParents: loadParents);
        }
      } // END RELATIONSHIPS PRELOAD

    } else {
      obj = null;
    }
    return obj;
  }

  /// This method always returns [Country]
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  /// ex: toSingle(preload:true) -> Loads all related objects
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  /// ex: toSingle(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  /// <returns> Country?
  @override
  Future<Country> toSingleOrDefault(
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    return await toSingle(
            preload: preload,
            preloadFields: preloadFields,
            loadParents: loadParents,
            loadedFields: loadedFields) ??
        Country();
  }

  /// This method returns int. [Country]
  /// <returns>int
  @override
  Future<int> toCount([VoidCallback Function(int c)? countryCount]) async {
    buildParameters();
    qparams.selectColumns = ['COUNT(1) AS CNT'];
    final countriesFuture = await _mnCountry!.toList(qparams);
    final int count = countriesFuture[0]['CNT'] as int;
    if (countryCount != null) {
      countryCount(count);
    }
    return count;
  }

  /// This method returns List<Country> [Country]
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  /// ex: toList(preload:true) -> Loads all related objects
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  /// ex: toList(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  /// <returns>List<Country>
  @override
  Future<List<Country>> toList(
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    final data = await toMapList();
    final List<Country> countriesData = await Country.fromMapList(data,
        preload: preload,
        preloadFields: preloadFields,
        loadParents: loadParents,
        loadedFields: loadedFields,
        setDefaultValues: qparams.selectColumns == null);
    return countriesData;
  }

  /// This method returns Json String [Country]
  @override
  Future<String> toJson() async {
    final list = <dynamic>[];
    final data = await toList();
    for (var o in data) {
      list.add(o.toMap(forJson: true));
    }
    return json.encode(list);
  }

  /// This method returns Json String. [Country]
  @override
  Future<String> toJsonWithChilds() async {
    final list = <dynamic>[];
    final data = await toList();
    for (var o in data) {
      list.add(await o.toMapWithChildren(false, true));
    }
    return json.encode(list);
  }

  /// This method returns List<dynamic>. [Country]
  /// <returns>List<dynamic>
  @override
  Future<List<dynamic>> toMapList() async {
    buildParameters();
    return await _mnCountry!.toList(qparams);
  }

  /// This method returns Primary Key List SQL and Parameters retVal = Map<String,dynamic>. [Country]
  /// retVal['sql'] = SQL statement string, retVal['args'] = whereArguments List<dynamic>;
  /// <returns>List<String>
  @override
  Map<String, dynamic> toListPrimaryKeySQL([bool buildParams = true]) {
    final Map<String, dynamic> _retVal = <String, dynamic>{};
    if (buildParams) {
      buildParameters();
    }
    _retVal['sql'] = 'SELECT `name` FROM country WHERE ${qparams.whereString}';
    _retVal['args'] = qparams.whereArguments;
    return _retVal;
  }

  /// This method returns Primary Key List<String>.
  /// <returns>List<String>
  @override
  Future<List<String>> toListPrimaryKey([bool buildParams = true]) async {
    if (buildParams) {
      buildParameters();
    }
    final List<String> nameData = <String>[];
    qparams.selectColumns = ['name'];
    final nameFuture = await _mnCountry!.toList(qparams);

    final int count = nameFuture.length;
    for (int i = 0; i < count; i++) {
      nameData.add(nameFuture[i]['name'] as String);
    }
    return nameData;
  }

  /// Returns List<dynamic> for selected columns. Use this method for 'groupBy' with min,max,avg..  [Country]
  /// Sample usage: (see EXAMPLE 4.2 at https://github.com/hhtokpinar/sqfEntity#group-by)
  @override
  Future<List<dynamic>> toListObject() async {
    buildParameters();

    final objectFuture = _mnCountry!.toList(qparams);

    final List<dynamic> objectsData = <dynamic>[];
    final data = await objectFuture;
    final int count = data.length;
    for (int i = 0; i < count; i++) {
      objectsData.add(data[i]);
    }
    return objectsData;
  }

  /// Returns List<String> for selected first column
  /// Sample usage: await Country.select(columnsToSelect: ['columnName']).toListString()
  @override
  Future<List<String>> toListString(
      [VoidCallback Function(List<String> o)? listString]) async {
    buildParameters();

    final objectFuture = _mnCountry!.toList(qparams);

    final List<String> objectsData = <String>[];
    final data = await objectFuture;
    final int count = data.length;
    for (int i = 0; i < count; i++) {
      objectsData.add(data[i][qparams.selectColumns![0]].toString());
    }
    if (listString != null) {
      listString(objectsData);
    }
    return objectsData;
  }
}
// endregion CountryFilterBuilder

// region CountryFields
class CountryFields {
  static TableField? _fName;
  static TableField get name {
    return _fName =
        _fName ?? SqlSyntax.setField(_fName, 'name', DbType.integer);
  }

  static TableField? _fNative;
  static TableField get native {
    return _fNative =
        _fNative ?? SqlSyntax.setField(_fNative, 'native', DbType.text);
  }

  static TableField? _fCapital;
  static TableField get capital {
    return _fCapital =
        _fCapital ?? SqlSyntax.setField(_fCapital, 'capital', DbType.text);
  }

  static TableField? _fContinent;
  static TableField get continent {
    return _fContinent = _fContinent ??
        SqlSyntax.setField(_fContinent, 'continent', DbType.text);
  }
}
// endregion CountryFields

//region CountryManager
class CountryManager extends SqfEntityProvider {
  CountryManager()
      : super(MyDbModel(),
            tableName: _tableName,
            primaryKeyList: _primaryKeyList,
            whereStr: _whereStr);
  static const String _tableName = 'country';
  static const List<String> _primaryKeyList = ['name'];
  static const String _whereStr = 'name=?';
}

//endregion CountryManager
// region City
class City extends TableBase {
  City({this.name, this.country}) {
    _setDefaultValues();
    softDeleteActivated = false;
  }
  City.withFields(this.name, this.country) {
    _setDefaultValues();
  }
  City.withId(this.name, this.country) {
    _setDefaultValues();
  }
  // fromMap v2.0
  City.fromMap(Map<String, dynamic> o, {bool setDefaultValues = true}) {
    if (setDefaultValues) {
      _setDefaultValues();
    }
    name = o['name'].toString();
    country = o['country'].toString();

    // RELATIONSHIPS FromMAP
    plCountry = o['plCountry'] != null
        ? Country.fromMap(o['plCountry'] as Map<String, dynamic>)
        : null;
    // END RELATIONSHIPS FromMAP

    isSaved = true;
  }
  // FIELDS (City)
  String? name;
  String? country;
  bool? isSaved;
  // end FIELDS (City)

// RELATIONSHIPS (City)
  /// to load parent of items to this field, use preload parameter ex: toList(preload:true) or toSingle(preload:true) or getById(preload:true)
  /// You can also specify this object into certain preload fields!. Ex: toList(preload:true, preloadFields:['plCountry', 'plField2'..]) or so on..
  Country? plCountry;

  /// get Country By Country
  Future<Country?> getCountry(
      {bool loadParents = false, List<String>? loadedFields}) async {
    final _obj = await Country()
        .getById(country, loadParents: loadParents, loadedFields: loadedFields);
    return _obj;
  }
  // END RELATIONSHIPS (City)

  static const bool _softDeleteActivated = false;
  CityManager? __mnCity;

  CityManager get _mnCity {
    return __mnCity = __mnCity ?? CityManager();
  }

  // METHODS
  @override
  Map<String, dynamic> toMap(
      {bool forQuery = false, bool forJson = false, bool forView = false}) {
    final map = <String, dynamic>{};
    map['name'] = name;
    if (country != null) {
      map['country'] = forView
          ? plCountry == null
              ? country
              : plCountry!.native
          : country;
    } else if (country != null || !forView) {
      map['country'] = null;
    }

    return map;
  }

  @override
  Future<Map<String, dynamic>> toMapWithChildren(
      [bool forQuery = false,
      bool forJson = false,
      bool forView = false]) async {
    final map = <String, dynamic>{};
    map['name'] = name;
    if (country != null) {
      map['country'] = forView
          ? plCountry == null
              ? country
              : plCountry!.native
          : country;
    } else if (country != null || !forView) {
      map['country'] = null;
    }

    return map;
  }

  /// This method returns Json String [City]
  @override
  String toJson() {
    return json.encode(toMap(forJson: true));
  }

  /// This method returns Json String [City]
  @override
  Future<String> toJsonWithChilds() async {
    return json.encode(await toMapWithChildren(false, true));
  }

  @override
  List<dynamic> toArgs() {
    return [name, country];
  }

  @override
  List<dynamic> toArgsWithIds() {
    return [name, country];
  }

  static Future<List<City>?> fromWebUrl(Uri uri,
      {Map<String, String>? headers}) async {
    try {
      final response = await http.get(uri, headers: headers);
      return await fromJson(response.body);
    } catch (e) {
      debugPrint(
          'SQFENTITY ERROR City.fromWebUrl: ErrorMessage: ${e.toString()}');
      return null;
    }
  }

  Future<http.Response> postUrl(Uri uri, {Map<String, String>? headers}) {
    return http.post(uri, headers: headers, body: toJson());
  }

  static Future<List<City>> fromJson(String jsonBody) async {
    final Iterable list = await json.decode(jsonBody) as Iterable;
    var objList = <City>[];
    try {
      objList = list
          .map((city) => City.fromMap(city as Map<String, dynamic>))
          .toList();
    } catch (e) {
      debugPrint(
          'SQFENTITY ERROR City.fromJson: ErrorMessage: ${e.toString()}');
    }
    return objList;
  }

  static Future<List<City>> fromMapList(List<dynamic> data,
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields,
      bool setDefaultValues = true}) async {
    final List<City> objList = <City>[];
    loadedFields = loadedFields ?? [];
    for (final map in data) {
      final obj = City.fromMap(map as Map<String, dynamic>,
          setDefaultValues: setDefaultValues);
      // final List<String> _loadedFields = List<String>.from(loadedFields);

      // RELATIONSHIPS PRELOAD
      if (preload || loadParents) {
        loadedFields = loadedFields ?? [];
        if ((preloadFields == null ||
            loadParents ||
            preloadFields.contains('plCountry'))) {
          obj.plCountry =
              obj.plCountry ?? await obj.getCountry(loadParents: loadParents);
        }
      } // END RELATIONSHIPS PRELOAD

      objList.add(obj);
    }
    return objList;
  }

  /// returns City by ID if exist, otherwise returns null
  /// Primary Keys: String? name
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  /// ex: getById(preload:true) -> Loads all related objects
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  /// ex: getById(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  /// <returns>returns [City] if exist, otherwise returns null
  Future<City?> getById(String? name,
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    if (name == null) {
      return null;
    }
    City? obj;
    final data = await _mnCity.getById([name]);
    if (data.length != 0) {
      obj = City.fromMap(data[0] as Map<String, dynamic>);

      // RELATIONSHIPS PRELOAD
      if (preload || loadParents) {
        loadedFields = loadedFields ?? [];
        if ((preloadFields == null ||
            loadParents ||
            preloadFields.contains('plCountry'))) {
          obj.plCountry =
              obj.plCountry ?? await obj.getCountry(loadParents: loadParents);
        }
      } // END RELATIONSHIPS PRELOAD

    } else {
      obj = null;
    }
    return obj;
  }

  /// Saves the (City) object. If the Primary Key (name) field is null, returns Error.
  /// INSERTS (If not exist) OR REPLACES (If exist) data while Primary Key is not null.
  /// Call the saveAs() method if you do not want to save it when there is another row with the same name
  /// <returns>Returns BoolResult
  @override
  Future<BoolResult> save({bool ignoreBatch = true}) async {
    final result = BoolResult(success: false);
    try {
      await _mnCity.rawInsert(
          'INSERT ${isSaved! ? 'OR REPLACE' : ''} INTO city (name, country)  VALUES (?,?)',
          toArgsWithIds(),
          ignoreBatch);
      result.success = true;
      isSaved = true;
    } catch (e) {
      result.errorMessage = e.toString();
    }

    saveResult = result;
    return result;
  }

  /// saveAll method saves the sent List<City> as a bulk in one transaction
  /// Returns a <List<BoolResult>>
  static Future<List<dynamic>> saveAll(List<City> cities,
      {bool? exclusive, bool? noResult, bool? continueOnError}) async {
    List<dynamic>? result = [];
    // If there is no open transaction, start one
    final isStartedBatch = await MyDbModel().batchStart();
    for (final obj in cities) {
      await obj.save();
    }
    if (!isStartedBatch) {
      result = await MyDbModel().batchCommit(
          exclusive: exclusive,
          noResult: noResult,
          continueOnError: continueOnError);
    }
    return result!;
  }

  /// Updates if the record exists, otherwise adds a new row
  /// <returns>Returns 1
  @override
  Future<int?> upsert({bool ignoreBatch = true}) async {
    try {
      final result = await _mnCity.rawInsert(
          'INSERT OR REPLACE INTO city (name, country)  VALUES (?,?)',
          [name, country],
          ignoreBatch);
      if (result! > 0) {
        saveResult = BoolResult(
            success: true,
            successMessage: 'City name=$name updated successfully');
      } else {
        saveResult = BoolResult(
            success: false, errorMessage: 'City name=$name did not update');
      }
      return 1;
    } catch (e) {
      saveResult = BoolResult(
          success: false,
          errorMessage: 'City Save failed. Error: ${e.toString()}');
      return null;
    }
  }

  /// Deletes City

  /// <returns>BoolResult res.success= true (Deleted), false (Could not be deleted)
  @override
  Future<BoolResult> delete([bool hardDelete = false]) async {
    debugPrint('SQFENTITIY: delete City invoked (name=$name)');
    if (!_softDeleteActivated || hardDelete) {
      return _mnCity
          .delete(QueryParams(whereString: 'name=?', whereArguments: [name]));
    } else {
      return _mnCity.updateBatch(
          QueryParams(whereString: 'name=?', whereArguments: [name]),
          {'isDeleted': 1});
    }
  }

  @override
  Future<BoolResult> recover([bool recoverChilds = true]) {
    // not implemented because:
    final msg =
        'set useSoftDeleting:true in the table definition of [City] to use this feature';
    throw UnimplementedError(msg);
  }

  @override
  CityFilterBuilder select(
      {List<String>? columnsToSelect, bool? getIsDeleted}) {
    return CityFilterBuilder(this, getIsDeleted)
      ..qparams.selectColumns = columnsToSelect;
  }

  @override
  CityFilterBuilder distinct(
      {List<String>? columnsToSelect, bool? getIsDeleted}) {
    return CityFilterBuilder(this, getIsDeleted)
      ..qparams.selectColumns = columnsToSelect
      ..qparams.distinct = true;
  }

  void _setDefaultValues() {
    isSaved = false;
  }

  @override
  void rollbackPk() {
    if (isInsert == true) {
      name = null;
    }
  }

  // END METHODS
  // BEGIN CUSTOM CODE
  /*
      you can define customCode property of your SqfEntityTable constant. For example:
      const tablePerson = SqfEntityTable(
      tableName: 'person',
      primaryKeyName: 'id',
      primaryKeyType: PrimaryKeyType.integer_auto_incremental,
      fields: [
        SqfEntityField('firstName', DbType.text),
        SqfEntityField('lastName', DbType.text),
      ],
      customCode: '''
       String fullName()
       { 
         return '$firstName $lastName';
       }
      ''');
     */
  // END CUSTOM CODE
}
// endregion city

// region CityField
class CityField extends FilterBase {
  CityField(CityFilterBuilder cityFB) : super(cityFB);

  @override
  CityFilterBuilder equals(dynamic pValue) {
    return super.equals(pValue) as CityFilterBuilder;
  }

  @override
  CityFilterBuilder equalsOrNull(dynamic pValue) {
    return super.equalsOrNull(pValue) as CityFilterBuilder;
  }

  @override
  CityFilterBuilder isNull() {
    return super.isNull() as CityFilterBuilder;
  }

  @override
  CityFilterBuilder contains(dynamic pValue) {
    return super.contains(pValue) as CityFilterBuilder;
  }

  @override
  CityFilterBuilder startsWith(dynamic pValue) {
    return super.startsWith(pValue) as CityFilterBuilder;
  }

  @override
  CityFilterBuilder endsWith(dynamic pValue) {
    return super.endsWith(pValue) as CityFilterBuilder;
  }

  @override
  CityFilterBuilder between(dynamic pFirst, dynamic pLast) {
    return super.between(pFirst, pLast) as CityFilterBuilder;
  }

  @override
  CityFilterBuilder greaterThan(dynamic pValue) {
    return super.greaterThan(pValue) as CityFilterBuilder;
  }

  @override
  CityFilterBuilder lessThan(dynamic pValue) {
    return super.lessThan(pValue) as CityFilterBuilder;
  }

  @override
  CityFilterBuilder greaterThanOrEquals(dynamic pValue) {
    return super.greaterThanOrEquals(pValue) as CityFilterBuilder;
  }

  @override
  CityFilterBuilder lessThanOrEquals(dynamic pValue) {
    return super.lessThanOrEquals(pValue) as CityFilterBuilder;
  }

  @override
  CityFilterBuilder inValues(dynamic pValue) {
    return super.inValues(pValue) as CityFilterBuilder;
  }

  @override
  CityField get not {
    return super.not as CityField;
  }
}
// endregion CityField

// region CityFilterBuilder
class CityFilterBuilder extends ConjunctionBase {
  CityFilterBuilder(City obj, bool? getIsDeleted) : super(obj, getIsDeleted) {
    _mnCity = obj._mnCity;
    _softDeleteActivated = obj.softDeleteActivated;
  }

  bool _softDeleteActivated = false;
  CityManager? _mnCity;

  /// put the sql keyword 'AND'
  @override
  CityFilterBuilder get and {
    super.and;
    return this;
  }

  /// put the sql keyword 'OR'
  @override
  CityFilterBuilder get or {
    super.or;
    return this;
  }

  /// open parentheses
  @override
  CityFilterBuilder get startBlock {
    super.startBlock;
    return this;
  }

  /// String whereCriteria, write raw query without 'where' keyword. Like this: 'field1 like 'test%' and field2 = 3'
  @override
  CityFilterBuilder where(String? whereCriteria, {dynamic parameterValue}) {
    super.where(whereCriteria, parameterValue: parameterValue);
    return this;
  }

  /// page = page number,
  /// pagesize = row(s) per page
  @override
  CityFilterBuilder page(int page, int pagesize) {
    super.page(page, pagesize);
    return this;
  }

  /// int count = LIMIT
  @override
  CityFilterBuilder top(int count) {
    super.top(count);
    return this;
  }

  /// close parentheses
  @override
  CityFilterBuilder get endBlock {
    super.endBlock;
    return this;
  }

  /// argFields might be String or List<String>.
  /// Example 1: argFields='name, date'
  /// Example 2: argFields = ['name', 'date']
  @override
  CityFilterBuilder orderBy(dynamic argFields) {
    super.orderBy(argFields);
    return this;
  }

  /// argFields might be String or List<String>.
  /// Example 1: argFields='field1, field2'
  /// Example 2: argFields = ['field1', 'field2']
  @override
  CityFilterBuilder orderByDesc(dynamic argFields) {
    super.orderByDesc(argFields);
    return this;
  }

  /// argFields might be String or List<String>.
  /// Example 1: argFields='field1, field2'
  /// Example 2: argFields = ['field1', 'field2']
  @override
  CityFilterBuilder groupBy(dynamic argFields) {
    super.groupBy(argFields);
    return this;
  }

  /// argFields might be String or List<String>.
  /// Example 1: argFields='name, date'
  /// Example 2: argFields = ['name', 'date']
  @override
  CityFilterBuilder having(dynamic argFields) {
    super.having(argFields);
    return this;
  }

  CityField _setField(CityField? field, String colName, DbType dbtype) {
    return CityField(this)
      ..param = DbParameter(
          dbType: dbtype, columnName: colName, wStartBlock: openedBlock);
  }

  CityField? _name;
  CityField get name {
    return _name = _setField(_name, 'name', DbType.integer);
  }

  CityField? _country;
  CityField get country {
    return _country = _setField(_country, 'country', DbType.text);
  }

  /// Deletes List<City> bulk by query
  ///
  /// <returns>BoolResult res.success= true (Deleted), false (Could not be deleted)
  @override
  Future<BoolResult> delete([bool hardDelete = false]) async {
    buildParameters();
    var r = BoolResult(success: false);

    if (_softDeleteActivated && !hardDelete) {
      r = await _mnCity!.updateBatch(qparams, {'isDeleted': 1});
    } else {
      r = await _mnCity!.delete(qparams);
    }
    return r;
  }

  /// using:
  /// update({'fieldName': Value})
  /// fieldName must be String. Value is dynamic, it can be any of the (int, bool, String.. )
  @override
  Future<BoolResult> update(Map<String, dynamic> values) {
    buildParameters();
    if (qparams.limit! > 0 || qparams.offset! > 0) {
      qparams.whereString =
          'name IN (SELECT name from city ${qparams.whereString!.isNotEmpty ? 'WHERE ${qparams.whereString}' : ''}${qparams.limit! > 0 ? ' LIMIT ${qparams.limit}' : ''}${qparams.offset! > 0 ? ' OFFSET ${qparams.offset}' : ''})';
    }
    return _mnCity!.updateBatch(qparams, values);
  }

  /// This method always returns [City] Obj if exist, otherwise returns null
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  /// ex: toSingle(preload:true) -> Loads all related objects
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  /// ex: toSingle(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  /// <returns> City?
  @override
  Future<City?> toSingle(
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    buildParameters(pSize: 1);
    final objFuture = _mnCity!.toList(qparams);
    final data = await objFuture;
    City? obj;
    if (data.isNotEmpty) {
      obj = City.fromMap(data[0] as Map<String, dynamic>);

      // RELATIONSHIPS PRELOAD
      if (preload || loadParents) {
        loadedFields = loadedFields ?? [];
        if ((preloadFields == null ||
            loadParents ||
            preloadFields.contains('plCountry'))) {
          obj.plCountry =
              obj.plCountry ?? await obj.getCountry(loadParents: loadParents);
        }
      } // END RELATIONSHIPS PRELOAD

    } else {
      obj = null;
    }
    return obj;
  }

  /// This method always returns [City]
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  /// ex: toSingle(preload:true) -> Loads all related objects
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  /// ex: toSingle(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  /// <returns> City?
  @override
  Future<City> toSingleOrDefault(
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    return await toSingle(
            preload: preload,
            preloadFields: preloadFields,
            loadParents: loadParents,
            loadedFields: loadedFields) ??
        City();
  }

  /// This method returns int. [City]
  /// <returns>int
  @override
  Future<int> toCount([VoidCallback Function(int c)? cityCount]) async {
    buildParameters();
    qparams.selectColumns = ['COUNT(1) AS CNT'];
    final citiesFuture = await _mnCity!.toList(qparams);
    final int count = citiesFuture[0]['CNT'] as int;
    if (cityCount != null) {
      cityCount(count);
    }
    return count;
  }

  /// This method returns List<City> [City]
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  /// ex: toList(preload:true) -> Loads all related objects
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  /// ex: toList(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  /// <returns>List<City>
  @override
  Future<List<City>> toList(
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    final data = await toMapList();
    final List<City> citiesData = await City.fromMapList(data,
        preload: preload,
        preloadFields: preloadFields,
        loadParents: loadParents,
        loadedFields: loadedFields,
        setDefaultValues: qparams.selectColumns == null);
    return citiesData;
  }

  /// This method returns Json String [City]
  @override
  Future<String> toJson() async {
    final list = <dynamic>[];
    final data = await toList();
    for (var o in data) {
      list.add(o.toMap(forJson: true));
    }
    return json.encode(list);
  }

  /// This method returns Json String. [City]
  @override
  Future<String> toJsonWithChilds() async {
    final list = <dynamic>[];
    final data = await toList();
    for (var o in data) {
      list.add(await o.toMapWithChildren(false, true));
    }
    return json.encode(list);
  }

  /// This method returns List<dynamic>. [City]
  /// <returns>List<dynamic>
  @override
  Future<List<dynamic>> toMapList() async {
    buildParameters();
    return await _mnCity!.toList(qparams);
  }

  /// This method returns Primary Key List SQL and Parameters retVal = Map<String,dynamic>. [City]
  /// retVal['sql'] = SQL statement string, retVal['args'] = whereArguments List<dynamic>;
  /// <returns>List<String>
  @override
  Map<String, dynamic> toListPrimaryKeySQL([bool buildParams = true]) {
    final Map<String, dynamic> _retVal = <String, dynamic>{};
    if (buildParams) {
      buildParameters();
    }
    _retVal['sql'] = 'SELECT `name` FROM city WHERE ${qparams.whereString}';
    _retVal['args'] = qparams.whereArguments;
    return _retVal;
  }

  /// This method returns Primary Key List<String>.
  /// <returns>List<String>
  @override
  Future<List<String>> toListPrimaryKey([bool buildParams = true]) async {
    if (buildParams) {
      buildParameters();
    }
    final List<String> nameData = <String>[];
    qparams.selectColumns = ['name'];
    final nameFuture = await _mnCity!.toList(qparams);

    final int count = nameFuture.length;
    for (int i = 0; i < count; i++) {
      nameData.add(nameFuture[i]['name'] as String);
    }
    return nameData;
  }

  /// Returns List<dynamic> for selected columns. Use this method for 'groupBy' with min,max,avg..  [City]
  /// Sample usage: (see EXAMPLE 4.2 at https://github.com/hhtokpinar/sqfEntity#group-by)
  @override
  Future<List<dynamic>> toListObject() async {
    buildParameters();

    final objectFuture = _mnCity!.toList(qparams);

    final List<dynamic> objectsData = <dynamic>[];
    final data = await objectFuture;
    final int count = data.length;
    for (int i = 0; i < count; i++) {
      objectsData.add(data[i]);
    }
    return objectsData;
  }

  /// Returns List<String> for selected first column
  /// Sample usage: await City.select(columnsToSelect: ['columnName']).toListString()
  @override
  Future<List<String>> toListString(
      [VoidCallback Function(List<String> o)? listString]) async {
    buildParameters();

    final objectFuture = _mnCity!.toList(qparams);

    final List<String> objectsData = <String>[];
    final data = await objectFuture;
    final int count = data.length;
    for (int i = 0; i < count; i++) {
      objectsData.add(data[i][qparams.selectColumns![0]].toString());
    }
    if (listString != null) {
      listString(objectsData);
    }
    return objectsData;
  }
}
// endregion CityFilterBuilder

// region CityFields
class CityFields {
  static TableField? _fName;
  static TableField get name {
    return _fName =
        _fName ?? SqlSyntax.setField(_fName, 'name', DbType.integer);
  }

  static TableField? _fCountry;
  static TableField get country {
    return _fCountry =
        _fCountry ?? SqlSyntax.setField(_fCountry, 'country', DbType.text);
  }
}
// endregion CityFields

//region CityManager
class CityManager extends SqfEntityProvider {
  CityManager()
      : super(MyDbModel(),
            tableName: _tableName,
            primaryKeyList: _primaryKeyList,
            whereStr: _whereStr);
  static const String _tableName = 'city';
  static const List<String> _primaryKeyList = ['name'];
  static const String _whereStr = 'name=?';
}

//endregion CityManager
class MyDbModelSequenceManager extends SqfEntityProvider {
  MyDbModelSequenceManager() : super(MyDbModel());
}
// END OF ENTITIES
